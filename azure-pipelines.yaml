name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: 'agentPool'

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test-vm'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(projectRoot)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate134732213'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(projectRoot)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(projectRoot)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(projectRoot)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIsDataValidation.json -e StarterAPIsEnv.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(projectRoot)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIsRegression.json -e StarterAPIsEnv.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(projectRoot)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(projectRoot)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Publish Postman Test Results'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: $(projectRoot)/automatedtesting/jmeter/fakerestapi
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: 'drop-perftests'

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: 'agentPool'    
    environment: $(environmentName)   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)     # ToDo
              appName: 'Project3-AppService'               # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip     # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
                tar -xf apache-jmeter-5.2.1.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                ./apache-jmeter-5.2.1/bin/jmeter -n -t MyTestPlan.jmx -j jmeter.log -f
                cat jmeter.log
              workingDirectory: $(Pipeline.Workspace)/drop-perftests          # ToDo: Use the artifact name from the task above
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: '$(environmentName)'     # ToDo: Change/provide a name
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests    # ToDo: Change/provide a name
          
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |           
                Write-Host "Installing papckages"
                Start-Process powershell -Verb runAs -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command { 
                  # Upgrade installed packages
                  apt-get upgrade -y
                  # Install Python3 pip
                  apt-get install python3-pip -y
                  # Install unzip
                  apt-get install unzip -y
                  # Install Chromium browser
                  apt-get install -y chromium-browser
                  # Install Selenium Python package
                  pip3 install selenium
                  # Change current directory to home folder
                  cd ~
                }"
                $DIR = "C:\Users\devopsagent\app"
                if (-Not (Test-Path -Path $DIR -PathType Container)) {
                    New-Item -ItemType Directory -Path $DIR | Out-Null
                }
                $sourcePath = "C:\azagent\A1\_work\1\drop-uitests\$(Build.BuildId)-uitests.zip"
                $destinationPath = "C:\Users\devopsagent\app"
                $chromedriverZipPath = "C:\Users\devopsagent\app\chromedriver_win64.zip"
                
                Write-Host "Move uitests to app folder"
                # Move the uitests.zip file to the 'app' folder
                Move-Item -Path $sourcePath -Destination $destinationPath

                Write-Host "Change directory to app folder"
                # Change current directory to the 'app' folder
                Set-Location $destinationPath

                Write-Host "Unzip uitests file"
                # Unzip the uitests.zip file
                Expand-Archive -Path "$(Build.BuildId)-uitests.zip" -DestinationPath $destinationPath -Force

                Write-Host "Set file variable to chromedriver path"
                # Set the FILE variable to the chromedriver_win64.zip path
                $FILE = $chromedriverZipPath

                Write-Host "Check if chromedriver file exists and if not download and install it"
                # Check if the chromedriver file exists, if not, download and install it
                if (-Not (Test-Path -Path $FILE -PathType Leaf)) {

                    # Download the chromedriver zip file
                    Invoke-WebRequest -Uri "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/win64/chromedriver-win64.zip" -OutFile "chromedriver_win64.zip" -UseBasicParsing

                    # Unzip the chromedriver zip file
                    Expand-Archive -Path "chromedriver_win64.zip" -DestinationPath $destinationPath -Force

                    # Create a symbolic link to chromedriver for global accessibility
                    New-Item -ItemType SymbolicLink -Path "C:\Users\devopsagent\AppData\Local\Temp\chromedriver" -Target "$destinationPath\chromedriver.exe" -Force
                    Move-Item -Path "C:\Users\devopsagent\AppData\Local\Temp\chromedriver" -Destination "C:\Program Files\chromedriver" -Force
                }

                Write-Host "Add app folder to path env variable"
                # Add the 'app' folder to the PATH environment variable
                $env:PATH += ";C:\Users\devopsagent\app"

                # Print a message indicating that Selenium Tests are starting
                Write-Host "Starting Selenium Tests"

                Write-Host "Run add_remove_from_cart python script"
                # Run the Python script 'add_remove_from_cart.py' and redirect output to 'selenium.log'
                $env:PATH += ";C:\Users\devopsagent\AppData\Local\Programs\Python\Python311"
                python add_remove_from_cart.py >> selenium.log

                # Print a message indicating that Selenium Tests have completed
                Write-Host "Completed Selenium Tests. Check selenium.log for results."

          # - task: Bash@3
          #   inputs:
          #     targetType: 'inline'
          #     script: |           
          #       #! /bin/bash
                
          #       sudo apt-get upgrade -y
          #       sudo apt-get install python3-pip -y
          #       sudo apt-get install unzip -y
          #       sudo apt-get install -y chromium-browser
          #       pip3 install selenium
          #       cd ~/
          #       DIR=/home/testuser/app
          #       if [ ! -d "$DIR" ]; then
          #           mkdir app
          #       fi
          #       mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
          #       cd app
          #       unzip -o $(Build.BuildId)-uitests.zip
          #       FILE=/home/testuser/app/chromedriver_linux64.zip
          #       if [ ! -f "$FILE" ]; then
          #           LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          #           wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
          #           unzip -o chromedriver_linux64.zip
          #           sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
          #       fi
          #       export PATH=$PATH:/home/testuser/app
          #       echo "Starting Selenium Tests"
          #       python3 add_remove_from_cart.py >> selenium.log
          #       echo "Completed Selenium Tests. Check selenium.log for results."